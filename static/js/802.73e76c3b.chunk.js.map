{"version":3,"file":"static/js/802.73e76c3b.chunk.js","mappings":"qPAsBA,EAnBuB,WACnB,OACI,4BACI,mDACA,2BACI,yBACI,SAAC,KAAD,CAAMA,GAAG,OAAT,qBAEJ,yBACI,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGR,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACI,SAAC,KAAD,QAIf,ECGD,EArByB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAChBC,EAAsED,EAAtEC,eAAgBC,EAAsDF,EAAtDE,MAAOC,EAA+CH,EAA/CG,YAAaC,EAAkCJ,EAAlCI,aAAcC,EAAoBL,EAApBK,SAAUC,EAAUN,EAAVM,OAEnE,OACI,4BACI,0BACI,gBAAKC,IAAG,yCAAoCJ,GAAeK,IAAKN,OAEpE,4BACI,wBAAKD,GAAkCC,KACvC,wCAAgBO,KAAKC,MAAqB,IAAfN,EAAqB,IAAhD,QACA,sCACA,uBAAIC,KACJ,oCACA,uBAAIC,EAAOK,KAAI,qBAAEC,IAAF,IAAkBC,KAAK,WAE1C,SAAC,EAAD,MAGX,ECmBD,EAlCqB,WAAO,IAAD,IAChBC,GAAWC,EAAAA,EAAAA,MAAXD,QACDE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAC3D,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOtB,EAAP,KAAauB,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACFZ,IAEJa,EAAAA,EAAAA,IAAgBb,GACfc,MAAK,SAAAC,GAEEA,EAIJN,EAAQM,GAHJC,EAAAA,GAAAA,MAAA,YAIP,IACAC,OAAM,SAAAP,GAAK,OAAIC,EAASD,EAAb,GAEf,GAAE,CAACV,KAGA,4BACI,0BACI,SAAC,KAAD,CAAMjB,GAAIqB,EAAoBc,QAA9B,uBAEHhC,IAAQ,SAAC,EAAD,CAAkBA,KAAMA,IAChCwB,IAAS,wBAAKA,EAAMS,YAGhC,C,uJClBD,IAAMC,EAAW,mCACXC,EAAM,gCAECC,EAAoB,WAC7B,OAAOC,MAAM,GAAD,OAAIF,EAAJ,oCAAmCD,IAC1CN,MAAK,SAAAU,GAAG,OAAIA,EAAIC,MAAR,GAEhB,EAEYC,EAAc,SAAC5B,GACxB,OAAOyB,MAAM,GAAD,OAAIF,EAAJ,gCAA+BD,EAA/B,4DAA2FtB,IACtGgB,MAAK,SAAAa,GACF,OAAGA,EAASC,GACDD,EAASF,OAGbI,QAAQC,OACX,IAAIC,MAAJ,UAAajC,EAAb,eAEP,GACJ,EAEYe,EAAkB,SAACb,GAC5B,OAAOuB,MAAM,GAAD,OAAIF,EAAJ,iBAAgBrB,EAAhB,oBAAmCoB,EAAnC,oBACXN,MAAK,SAAAa,GACF,OAAGA,EAASC,GACDD,EAASF,OAGbI,QAAQC,OACX,IAAIC,MAAM,aAEjB,GACJ,EAEYC,EAAY,SAAChC,GACtB,OAAOuB,MAAM,GAAD,OAAIF,EAAJ,iBAAgBrB,EAAhB,4BAA2CoB,EAA3C,oBACXN,MAAK,SAAAU,GAAG,OAAIA,EAAIC,MAAR,GACZ,EAEYQ,EAAa,SAACjC,GACvB,OAAOuB,MAAM,GAAD,OAAIF,EAAJ,iBAAgBrB,EAAhB,4BAA2CoB,EAA3C,2BACXN,MAAK,SAAAU,GAAG,OAAIA,EAAIC,MAAR,GACZ,C","sources":["components/AdditionalInfo/AdditionalInfo.jsx","components/MovieDetailsInfo/MovieDetailsInfo.jsx","pages/MovieDetails.jsx","services/films-api.js"],"sourcesContent":["import {  Suspense } from \"react\";\nimport { Link, Outlet} from \"react-router-dom\";\n\nconst AdditionalInfo = () => {\n    return (\n        <div>\n            <p>Additional information</p>\n            <ul>\n                <li>\n                    <Link to=\"cast\">Cast</Link>\n                </li>\n                <li>\n                    <Link to=\"reviews\">Reviews</Link>\n                </li>\n            </ul>\n            <Suspense fallback={<div>Loading...</div>}>\n                <Outlet/>\n            </Suspense>\n        </div>\n    );\n};\n\nexport default AdditionalInfo;","import AdditionalInfo from \"components/AdditionalInfo\";\n\nconst MovieDetailsInfo = ({film}) => {\n    const {original_title, title, poster_path, vote_average, overview, genres} = film;\n\n    return (\n        <div>\n            <div>\n                <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} />\n            </div>\n            <div>\n                <h2>{original_title ? original_title : title}</h2>\n                <p>User Score: {Math.round(vote_average * 100 / 10)}%</p>\n                <h3>Overview</h3>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{genres.map(({name}) => name).join(' ')}</p>\n            </div>\n            <AdditionalInfo/>\n        </div>\n    );\n};\n\nexport default MovieDetailsInfo;","import { useState, useEffect, useRef } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport {  toast } from 'react-toastify';\nimport { getMovieDetails } from \"services/films-api\";\nimport MovieDetailsInfo from \"components/MovieDetailsInfo/MovieDetailsInfo\";\n\nconst MovieDetails = () => {\n    const {movieId} = useParams();\n    const location = useLocation();\n    const backLinkLocationRef = useRef(location.state?.from ?? \"/movies\");\n    const [film, setFilm] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        if(!movieId) return;\n        \n        getMovieDetails(movieId)\n        .then(resp => {\n\n            if(!resp) {\n                toast.error(`Not found`);\n                return;\n            }\n            setFilm(resp);\n        })\n        .catch(error => setError(error));\n\n    }, [movieId]);\n\n    return (\n        <div>\n            <div>\n                <Link to={backLinkLocationRef.current}>Go back</Link>\n            </div>\n            {film && <MovieDetailsInfo film={film}/>} \n            {error && <h2>{error.message}</h2>}\n        </div>\n    )\n}\n\nexport default MovieDetails;\n\n","// function fetchFilms (search) {\n//     const USER_KEY = 'e7e8717bf37b2131c41f035d5b761556';\n//     const URL = 'https://api.themoviedb.org/3/';\n\n//     return (\n//         fetch(`${URL}trending/all/day?api_key=${USER_KEY}`)\n//         .then(response => {\n//             if(response.ok) {\n//                 return response.json();\n//             }\n        \n//             return Promise.reject(\n//                 new Error('Not found')\n//             );\n//         })\n//     );\n// };\n\n// export default fetchFilms;\n\nconst USER_KEY = 'e7e8717bf37b2131c41f035d5b761556';\nconst URL = 'https://api.themoviedb.org/3/';\n\nexport const getTrandingMovies = () => {\n    return fetch(`${URL}trending/all/day?api_key=${USER_KEY}`)\n        .then(res => res.json())\n    \n};\n\nexport const searchMovie = (name) => {\n    return fetch(`${URL}search/movie?api_key=${USER_KEY}&language=en-US&page=1&include_adult=false&query=${name}`)\n    .then(response => {\n        if(response.ok) {\n            return response.json();\n        }\n    \n        return Promise.reject(\n            new Error(`${name} not found`)\n        );\n    });\n};\n\nexport const getMovieDetails = (movieId) => {\n    return fetch(`${URL}movie/${movieId}?api_key=${USER_KEY}&language=en-US`)\n    .then(response => {\n        if(response.ok) {\n            return response.json();\n        }\n    \n        return Promise.reject(\n            new Error('Not found')\n        );\n    });\n};\n\nexport const getActors = (movieId) => {\n    return fetch(`${URL}movie/${movieId}/credits?api_key=${USER_KEY}&language=en-US`)\n    .then(res => res.json())\n};\n\nexport const getReviews = (movieId) => {\n    return fetch(`${URL}movie/${movieId}/reviews?api_key=${USER_KEY}&language=en-US&page=1`)\n    .then(res => res.json())\n};"],"names":["to","Suspense","fallback","film","original_title","title","poster_path","vote_average","overview","genres","src","alt","Math","round","map","name","join","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useState","setFilm","error","setError","useEffect","getMovieDetails","then","resp","toast","catch","current","message","USER_KEY","URL","getTrandingMovies","fetch","res","json","searchMovie","response","ok","Promise","reject","Error","getActors","getReviews"],"sourceRoot":""}